---
title: "People Like Me methods"
format: html
server: shiny
---

## Shiny Documents

This Quarto document is made interactive using Shiny. Interactive documents allow readers to modify parameters and see the results immediately. Learn more about Shiny interactive documents at <https://quarto.org/docs/interactive/shiny/>.

## Inputs and Outputs

You can embed Shiny inputs and outputs in your document. Outputs are automatically updated whenever inputs change. This demonstrates how a standard R plot can be made interactive:

```{r}
library(shiny)
devtools::load_all(quiet = TRUE)

```


```{r}
#| panel: sidebar
#| warning: false
#| message: false

# fileInput(train, "Choose csv", accept = ".csv")
selectInput("id", "The Patient ID:", unique(all$id))

# selectizeInput("methods", "Which methods do you want to use for matching?", 
#                c("Mahalanobis distance" = "mahalanobis",
#                  "Euclidean distance" = "euclidean",
#                  "Single point difference" = "single"))

numericInput("alpha", "Critical values for Mahalanobis:", NULL, min = 0, max = 1)
numericInput("num", "Matching number for people like me:", NULL, min = 5, max = 50)
numericInput("time", "Matching time for single time:", NULL, min = 5, max = 50)
actionButton("run","Run!",icon = icon("refresh"), class = "btn-lg btn-success")
```

```{r}
#| panel: fill
plotOutput("plot")
```


```{r}
#| context: server
sid <- reactive({sid <- input$id}) 
# match_methods <- reactive(input$methods)
alpha <- reactive({alpha <- input$alpha})
num <- reactive({num <- input$num})
time <- reactive({time <- input$time})

output$plot <- renderPlot({
  devtools::load_all(quiet = TRUE)
  
  bks_pred <- 
    plmlmm:::brokenstick_prediction(
      outcome = "ht",
      time = "time",
      id = "id",
      dataset = train,
      knots = c(5, 10, 12),
      pred_time = c(2, 4, 6, 8, 10, 12),
      choice = "predicted")

  lb_data <- 
    plmlmm:::linear_brokenstick(
      lm_formula = "`.pred` ~ time * sex + baseline",
      bks_pred = bks_pred)
  
  
  ## mahalanobis p value matching-----------------------------------------------
  pm_mhl_p <-
    plmlmm:::pred_matching(
      lb_data = lb_data,
      obs_data = train,
      match_methods = "mahalanobis",
      match_alpha = alpha(),
      match_num = NULL,
      gamlss_formula = "ht ~ cs(time, df = 3)",
      gamsigma_formula = "~ cs(time, df = 1)",
      match_plot = TRUE,
      predict_plot = TRUE,
      sbj = sid())
  
  ## mahalanobis fixed matching number -------------------------------------
  pm_mhl_n <- 
    plmlmm:::pred_matching(
      lb_data = lb_data,
      obs_data = train,
      match_methods = "mahalanobis",
      match_num = num(),
      match_alpha = NULL,
      gamlss_formula = "ht ~ cs(time, df = 3)",
      gamsigma_formula = "~ cs(time, df = 1)",
      match_plot = TRUE,
      predict_plot = TRUE,
      sbj = sid())
  
  ## euclidean fixed matching number
  pm_eld <- 
    plmlmm:::pred_matching(
      lb_data = lb_data,
      obs_data = train,
      match_methods = "euclidean",
      match_num = num(),
      gamlss_formula = "ht ~ cs(time, df = 3)",
      gamsigma_formula = "~ cs(time, df = 1)",
      match_plot = TRUE,
      predict_plot = TRUE,
      sbj = sid())
  
  ## single time point matching number
  pm_sgl <-
    plmlmm:::pred_matching(
      lb_data = lb_data,
      obs_data = train,
      match_methods = "single",
      match_num = num(),
      match_time = time(),
      gamlss_formula = "ht ~ cs(time, df = 3)",
      gamsigma_formula = "~ cs(time, df = 1)",
      match_plot = TRUE,
      predict_plot = TRUE,
      sbj = sid())
  
  gridExtra::grid.arrange(pm_mhl_n$matching_trajectory + ggtitle("Mahalanobis n"),
                pm_mhl_n$predictive_centiles + ggtitle("Mahalanobis n"),
               pm_mhl_p$matching_trajectory + ggtitle("Mahalanobis p"),
                pm_mhl_p$predictive_centiles + ggtitle("Mahalanobis p"),
               pm_sgl$matching_trajectory + ggtitle("Single n"),
                pm_sgl$predictive_centiles + ggtitle("Single n"),
               pm_eld$matching_trajectory + ggtitle("Euclidean n"),
                pm_eld$predictive_centiles + ggtitle("Eucliden n"),
                nrow = 4)},
  res = 96)


## run the app

```



```{r}
# shinyApp(ui = ui, server = server)
```

